% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeElement.R
\name{makeElement}
\alias{makeElement}
\title{Make a DDI Codebook element}
\usage{
makeElement(name, info = NULL, fill = FALSE, ...)
}
\arguments{
\item{name}{Character, a DDI Codebook element name.}

\item{info}{A named list object containing information necessary to create
the element.}

\item{fill}{Logical, fill the element with arbitrary values for its
mandatory children and attributes}

\item{...}{Other arguments, see Details.}
}
\value{
A standard list element of class \code{"DDI"} with reserved component names.
}
\description{
Creates a standard DDI element.
}
\details{
The structure of a DDI element in R follows the usual structure of
an XML node: it has text content, attributes and possibly other child (sub)
elements. Although a typical R list perfectly fits this structure, this
package uses a different type of list, to accommodate any other requirements.

The standard structure of a DDI element is an R list with separate components
for: "name", "content", "children" and "attributes". Instead of storing the
attributes in the usual R object attributes, the choice of using a regular
list component avoids the potential overlap of DDI element attribute names
over R's restricted attribute names such as \code{names} or \code{class}.

This slightly over-complicates the access to the list's (sub)components,
instead of the usual \code{object$component$subcomponent}, these need to be
accessed via the "children" component:
\code{object$children$component$children$subcomponent}

Dedicated functions are offered to make the manipulation of these children
components as smooth as possible. They all make use of the "name" component,
which is typically stored in the list component's name. Because each DDI
Codebook element has a unique structure, it is important to safeguard its
identification through the "name" component, especially if selecting a
particular component into a separate R object.

In the DDI Codebook, most elements and their attributes are optional, but
some are mandatory. In case of attributes, some become mandatory only if the
element itself is present. The mandatory elements need to be present in the
final version of the Codebook, to pass the validation against the XML schema.

By activating the argument \code{fill}, this function creates DDI elements
containing all mandatory (sub)elements and (their) attributes, filled with
arbitrary values that can be changed later on. Some recommended elements are
also filled, as expected by the CESSDA Data Catalogue profile for DDI
Codebook.

By default, the Codebook is assumed to have a single language for all
elements. This argument \code{monolang} can be deactivated through the \code{...} gate,
in which situation the appropriate elements will receive a default argument
\code{xmlang = "en"}. For other languages, that argument can also be provided
through the \code{...} gate.

One such DDI Codebook element is the \code{stdyDscr} (Study Description), with the
associated mandatory children, for instance title, ID number, distributor,
citation, abstract etc.
}
\examples{
stdyDscr <- makeElement("stdyDscr", fill = fill)

# the location of the R list sub-element "abstract":
stdyDscr$children$citation$children$titlStmt$children$titl

# easier to extract with:
getChildren("stdyDscr/citation/titlStmt/titl", from = stdyDscr)

}
\seealso{
\code{\link{addChildren}}
\code{\link{getChildren}}
\code{\link{showDetails}}
\code{\link{fromXMList}}
\code{\link{toXMList}}
}
\author{
Adrian Dusa
}
